/* tslint:disable */
// Do not edit this file.
// This file is generated from the API with command line argument "gensdk".

// About this-keyword and <T> in it see: https://github.com/Microsoft/TypeScript/issues/6452

import { request } from "../o2c";

export interface ApiErrors {
    onError<T>(this: T, errorCode: "Forbidden", cb: (data: null, req?: T) => void): T;
    onError<T>(this: T, errorCode: "NotFound", cb: (data: null, req?: T) => void): T;
    onError<T>(this: T, errorCode: "ValidationError", cb: (data: { fields : { [k: string]: { code : string, message : string, data : {  } }[] }, general : { code : string, message : string, data : {  } }[] }, req?: T) => void): T;
    onError<T>(this: T, errorCode: "ChangePasswordError", cb: (data: string[], req?: T) => void): T;
    onError<T>(this: T, errorCode: "ResetPasswordError", cb: (data: string[], req?: T) => void): T;
    onError<T>(this: T, errorCode: "RegisterError", cb: (data: string[], req?: T) => void): T;
    onError<T>(this: T, errorCode: "InvoiceSendError", cb: (data: string[], req?: T) => void): T;
}
export const Api = {
    Account : {
        Claims : () =>
            request<void>(`Account/Claims`, "GET", null, null),
        LoggedIn : () =>
            request<{ id : number, email : string }>(`Account/LoggedIn`, "GET", null, null),
        ChangePassword : (body: { currentPassword : string, newPassword : string }) =>
            request<boolean>(`Account/ChangePassword`, "POST", body, null),
        ForgotPassword : (body: { email : string }) =>
            request<boolean>(`Account/ForgotPassword`, "POST", body, null),
        ResetPassword : (body: { resetPasswordToken : string, newPassword : string }) =>
            request<boolean>(`Account/ResetPassword`, "POST", body, null)
    },
    Business : {
        Register : (body: { email : string, title : string, firstName : string, lastName : string, password : string }) =>
            request<boolean>(`Business/Register`, "POST", body, null)
    },
    Clients : {
        Get : (id: number) =>
            request<{ id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }>(`Clients/${id}`, "GET", null, null),
        Delete : (id: number) =>
            request<boolean>(`Clients/${id}`, "DELETE", null, null),
        Update : (id: number, body: { id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }) =>
            request<{ id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }>(`Clients/${id}`, "PUT", body, null),
        Create : () =>
            request<{ id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }>(`Clients`, "POST", null, null),
        List : () =>
            request<{ id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }[]>(`Clients`, "GET", null, null)
    },
    Invoices : {
        Get : (id: number) =>
            request<{ id : number, title : string, sent : string, clientId : number | null, client : { id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }, invoiceRows : { id : number | null, name : string, quantity : number, amount : number }[], created : string, modified : string }>(`Invoices/${id}`, "GET", null, null),
        Delete : (id: number) =>
            request<boolean>(`Invoices/${id}`, "DELETE", null, null),
        Update : (id: number, body: { title : string, clientId : number | null, invoiceRows : { id : number | null, name : string, quantity : number, amount : number }[] }) =>
            request<{ id : number, title : string, sent : string, clientId : number | null, client : { id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }, invoiceRows : { id : number | null, name : string, quantity : number, amount : number }[], created : string, modified : string }>(`Invoices/${id}`, "PUT", body, null),
        Create : () =>
            request<{ id : number, title : string, sent : string, clientId : number | null, client : { id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }, invoiceRows : { id : number | null, name : string, quantity : number, amount : number }[], created : string, modified : string }>(`Invoices`, "POST", null, null),
        ListLatest : () =>
            request<{ id : number, title : string, sent : string, clientId : number | null, client : { id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }, invoiceRows : { id : number | null, name : string, quantity : number, amount : number }[], created : string, modified : string }[]>(`Invoices`, "GET", null, null),
        Send : (id: number) =>
            request<{ id : number, title : string, sent : string, clientId : number | null, client : { id : number, name : string, address : string, city : string, postCode : string, email : string, phoneNumber : string }, invoiceRows : { id : number | null, name : string, quantity : number, amount : number }[], created : string, modified : string }>(`Invoices/${id}/Send`, "POST", null, null)
    }
};
